---
interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface HierarchicalHeading extends Heading {
  children: HierarchicalHeading[];
}

const { headings } = Astro.props as { headings: Heading[] };

function buildHierarchy(headings: Heading[]): HierarchicalHeading[] {
  const hierarchy: HierarchicalHeading[] = [];
  const stack: HierarchicalHeading[] = [];

  headings.forEach((heading) => {
    const item: HierarchicalHeading = { ...heading, children: [] };

    while (stack.length > 0 && stack[stack.length - 1].depth >= heading.depth) {
      stack.pop();
    }

    if (stack.length === 0) {
      hierarchy.push(item);
    } else {
      stack[stack.length - 1].children.push(item);
    }

    stack.push(item);
  });

  return hierarchy;
}

const hierarchicalHeadings = buildHierarchy(headings.filter((heading) => heading.depth <= 3));
---

<div class="this-post">This post</div>
<ul>
  {hierarchicalHeadings.map((heading) => (
    <li>
      <a href={`#${heading.slug}`}>{heading.text}</a>
      {heading.children.length > 0 && (
        <ul>
          {heading.children.map((child) => (
            <li>
              <a href={`#${child.slug}`}>{child.text}</a>
            </li>
          ))}
        </ul>
      )}
    </li>
  ))}
</ul>

<style>
  ul {
    text-align: left;
    list-style-type: none;
    padding-left: 0;
    padding-top: 0;
    margin-top: 0;
    line-height: 1.3;
  }

  li {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }

  ul ul {
    padding-left: 1rem;
  }

  .this-post {
    color: #333;
    width: 100%;
    display: block;
    text-align: center;
    font-family: "Rubik Mono One", sans-serif;
    font-weight: 300;
    letter-spacing: 1;
    text-transform: uppercase;
    padding-top: 2rem;
  }
</style>